{"version":3,"file":"toolbar.js","sources":["../../../../../../src/material/toolbar/toolbar.ts","../../../../../../src/material/toolbar/toolbar-module.ts","../../../../../../src/material/toolbar/public-api.ts","../../../../../../src/material/toolbar/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nconst _MatToolbarBase = mixinColor(class {\n  constructor(public _elementRef: ElementRef) {}\n});\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow, {descendants: true}) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this._checkToolbarMixedModes();\n      this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n    }\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (this._toolbarRows.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      // Check if there are any other DOM nodes that can display content but aren't inside of\n      // a <mat-toolbar-row> element.\n      const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n        .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n        .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n        .some(node => !!(node.textContent && node.textContent.trim()));\n\n      if (isCombinedUsage) {\n        throwToolbarMixedModesError();\n      }\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './toolbar-module';\nexport * from './toolbar';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}